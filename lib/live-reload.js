'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enableLiveReload = enableLiveReload;

var _fileChangeCache = require('./file-change-cache');

var _fileChangeCache2 = _interopRequireDefault(_fileChangeCache);

var _pathwatcherRx = require('./pathwatcher-rx');

var _Observable = require('rxjs/Observable');

require('./custom-operators');

require('rxjs/add/observable/defer');

require('rxjs/add/observable/empty');

require('rxjs/add/observable/fromPromise');

require('rxjs/add/operator/catch');

require('rxjs/add/operator/filter');

require('rxjs/add/operator/mergeMap');

require('rxjs/add/operator/switchMap');

require('rxjs/add/operator/timeout');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let BrowserWindow;
if (process.type === 'browser') {
  BrowserWindow = require('electron').BrowserWindow;
}

function reloadAllWindows() {
  let ret = BrowserWindow.getAllWindows().map(wnd => {
    if (!wnd.isVisible()) return Promise.resolve(true);

    return new Promise(res => {
      wnd.webContents.reloadIgnoringCache();
      wnd.once('ready-to-show', () => res(true));
    });
  });

  return Promise.all(ret);
}

function triggerHMRInRenderers() {
  BrowserWindow.getAllWindows().forEach(window => {
    window.webContents.send('__electron-compile__HMR');
  });

  return Promise.resolve(true);
}

function triggerAssetReloadInRenderers(filePath) {
  BrowserWindow.getAllWindows().forEach(window => {
    window.webContents.send('__electron-compile__stylesheet_reload', filePath);
  });

  return Promise.resolve(true);
}

const defaultOptions = {
  'strategy': {
    'text/html': 'naive',
    'text/tsx': 'react-hmr',
    'text/jsx': 'react-hmr',
    'application/javascript': 'react-hmr',
    'text/stylus': 'hot-stylesheets',
    'text/sass': 'hot-stylesheets',
    'text/scss': 'hot-stylesheets',
    'text/css': 'hot-stylesheets'
  }
};

function setupWatchHMR(filePath) {
  (0, _pathwatcherRx.watchPath)(filePath).subscribe(() => triggerHMRInRenderers());
}

function setWatchHotAssets(filePath) {
  (0, _pathwatcherRx.watchPath)(filePath).subscribe(() => triggerAssetReloadInRenderers(filePath));
}

function setupWatchNaive(filePath) {
  (0, _pathwatcherRx.watchPath)(filePath).subscribe(() => reloadAllWindows());
}

function enableLiveReload() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;
  let strategy = options.strategy;


  if (process.type !== 'browser' || !global.globalCompilerHost) throw new Error("Call this from the browser process, right after initializing electron-compile");

  // Just to handle the old case
  let oldsyntax = false;
  if (typeof strategy === 'string') {
    oldsyntax = true;
  }

  // Enable the methods described in the reload strategy
  for (let mime of Object.keys(strategy)) {
    switch (oldsyntax ? strategy : strategy[mime]) {
      case 'react-hmr':
        global.__electron_compile_hmr_enabled__ = true;
        break;
      case 'hot-stylesheets':
        global.__electron_compile_stylesheet_reload_enabled__ = true;
        break;
    }
  }

  // Find all the files compiled by electron-compile and setup watchers
  let filesWeCareAbout = global.globalCompilerHost.listenToCompileEvents().filter(x => !_fileChangeCache2.default.isInNodeModules(x.filePath)).subscribe(x => {
    switch (oldsyntax ? strategy : strategy[x.mimeType]) {
      case 'react-hmr':
        setupWatchHMR(x.filePath);
        break;
      case 'hot-stylesheets':
        setWatchHotAssets(x.filePath);
        break;
      case 'naive':
      default:
        setupWatchNaive(x.filePath);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,