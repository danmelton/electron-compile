'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = registerRequireExtension;

var _mimeTypes = require('@paulcbetts/mime-types');

var _mimeTypes2 = _interopRequireDefault(_mimeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let HMR = false;
let stylesheetReload = false;

const d = require('debug')('electron-compile:require-hook');
let electron = null;

if (process.type === 'renderer') {
  window.__hot = [];
  electron = require('electron');
  HMR = electron.remote.getGlobal('__electron_compile_hmr_enabled__');
  stylesheetReload = electron.remote.getGlobal('__electron_compile_stylesheet_reload_enabled__');

  if (HMR) {
    electron.ipcRenderer.on('__electron-compile__HMR', () => {
      d("Got HMR signal!");

      // Reset the module cache
      let cache = require('module')._cache;
      let toEject = Object.keys(cache).filter(x => x && !x.match(/[\\\/](node_modules|.*\.asar)[\\\/]/i));
      toEject.forEach(x => {
        d(`Removing node module entry for ${x}`);
        delete cache[x];
      });

      window.__hot.forEach(fn => fn());
    });
  }

  if (stylesheetReload) {
    electron.ipcRenderer.on('__electron-compile__stylesheet_reload', (e, path) => {
      let links = document.getElementsByTagName('link');

      for (let link of links) {
        let uri = link.href;
        if (uri.indexOf(path) !== -1) {
          link.href = link.href; // trigger a reload for this stylesheet
        }
      }
    });
  }
}

/**
 * Initializes the node.js hook that allows us to intercept files loaded by
 * node.js and rewrite them. This method along with {@link initializeProtocolHook}
 * are the top-level methods that electron-compile actually uses to intercept
 * code that Electron loads.
 *
 * @param  {CompilerHost} compilerHost  The compiler host to use for compilation.
 */
function registerRequireExtension(compilerHost, isProduction) {
  if (HMR) {
    try {
      require('module').prototype.hot = {
        accept: cb => window.__hot.push(cb)
      };

      require.main.require('react-hot-loader/patch');
    } catch (e) {
      console.error(`Couldn't require react-hot-loader/patch, you need to add react-hot-loader@3 as a dependency! ${e.message}`);
    }
  }

  let mimeTypeList = isProduction ? Object.keys(compilerHost.mimeTypesToRegister) : Object.keys(compilerHost.compilersByMimeType);

  mimeTypeList.forEach(mimeType => {
    let ext = _mimeTypes2.default.extension(mimeType);

    require.extensions[`.${ext}`] = (module, filename) => {
      var _compilerHost$compile = compilerHost.compileSync(filename);

      let code = _compilerHost$compile.code;


      if (code === null) {
        console.error(`null code returned for "${filename}".  Please raise an issue on 'electron-compile' with the contents of this file.`);
      }

      module._compile(code, filename);
    };
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1aXJlLWhvb2suanMiXSwibmFtZXMiOlsicmVnaXN0ZXJSZXF1aXJlRXh0ZW5zaW9uIiwiSE1SIiwic3R5bGVzaGVldFJlbG9hZCIsImQiLCJyZXF1aXJlIiwiZWxlY3Ryb24iLCJwcm9jZXNzIiwidHlwZSIsIndpbmRvdyIsIl9faG90IiwicmVtb3RlIiwiZ2V0R2xvYmFsIiwiaXBjUmVuZGVyZXIiLCJvbiIsImNhY2hlIiwiX2NhY2hlIiwidG9FamVjdCIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJ4IiwibWF0Y2giLCJmb3JFYWNoIiwiZm4iLCJlIiwicGF0aCIsImxpbmtzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxpbmsiLCJ1cmkiLCJocmVmIiwiaW5jbHVkZXMiLCJjb21waWxlckhvc3QiLCJpc1Byb2R1Y3Rpb24iLCJwcm90b3R5cGUiLCJob3QiLCJhY2NlcHQiLCJjYiIsInB1c2giLCJtYWluIiwiY29uc29sZSIsImVycm9yIiwibWVzc2FnZSIsIm1pbWVUeXBlTGlzdCIsIm1pbWVUeXBlc1RvUmVnaXN0ZXIiLCJjb21waWxlcnNCeU1pbWVUeXBlIiwibWltZVR5cGUiLCJleHQiLCJtaW1lVHlwZXMiLCJleHRlbnNpb24iLCJleHRlbnNpb25zIiwibW9kdWxlIiwiZmlsZW5hbWUiLCJjb21waWxlU3luYyIsImNvZGUiLCJfY29tcGlsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBb0R3QkEsd0I7O0FBcER4Qjs7Ozs7O0FBRUEsSUFBSUMsTUFBTSxLQUFWO0FBQ0EsSUFBSUMsbUJBQW1CLEtBQXZCOztBQUVBLE1BQU1DLElBQUlDLFFBQVEsT0FBUixFQUFpQiwrQkFBakIsQ0FBVjtBQUNBLElBQUlDLFdBQVcsSUFBZjs7QUFFQSxJQUFJQyxRQUFRQyxJQUFSLEtBQWlCLFVBQXJCLEVBQWlDO0FBQy9CQyxTQUFPQyxLQUFQLEdBQWUsRUFBZjtBQUNBSixhQUFXRCxRQUFRLFVBQVIsQ0FBWDtBQUNBSCxRQUFNSSxTQUFTSyxNQUFULENBQWdCQyxTQUFoQixDQUEwQixrQ0FBMUIsQ0FBTjtBQUNBVCxxQkFBbUJHLFNBQVNLLE1BQVQsQ0FBZ0JDLFNBQWhCLENBQTBCLGdEQUExQixDQUFuQjs7QUFFQSxNQUFJVixHQUFKLEVBQVM7QUFDUEksYUFBU08sV0FBVCxDQUFxQkMsRUFBckIsQ0FBd0IseUJBQXhCLEVBQW1ELE1BQU07QUFDdkRWLFFBQUUsaUJBQUY7O0FBRUE7QUFDQSxVQUFJVyxRQUFRVixRQUFRLFFBQVIsRUFBa0JXLE1BQTlCO0FBQ0EsVUFBSUMsVUFBVUMsT0FBT0MsSUFBUCxDQUFZSixLQUFaLEVBQW1CSyxNQUFuQixDQUEwQkMsS0FBS0EsS0FBSyxDQUFDQSxFQUFFQyxLQUFGLENBQVEsc0NBQVIsQ0FBckMsQ0FBZDtBQUNBTCxjQUFRTSxPQUFSLENBQWdCRixLQUFLO0FBQ25CakIsVUFBRyxrQ0FBaUNpQixDQUFFLEVBQXRDO0FBQ0EsZUFBT04sTUFBTU0sQ0FBTixDQUFQO0FBQ0QsT0FIRDs7QUFLQVosYUFBT0MsS0FBUCxDQUFhYSxPQUFiLENBQXFCQyxNQUFNQSxJQUEzQjtBQUNELEtBWkQ7QUFhRDs7QUFFRCxNQUFJckIsZ0JBQUosRUFBc0I7QUFDcEJHLGFBQVNPLFdBQVQsQ0FBcUJDLEVBQXJCLENBQXdCLHVDQUF4QixFQUFpRSxDQUFDVyxDQUFELEVBQUlDLElBQUosS0FBYTtBQUM1RSxVQUFJQyxRQUFRQyxTQUFTQyxvQkFBVCxDQUE4QixNQUE5QixDQUFaOztBQUVBLFdBQUssSUFBSUMsSUFBVCxJQUFpQkgsS0FBakIsRUFBd0I7QUFDdEIsWUFBSUksTUFBTUQsS0FBS0UsSUFBZjtBQUNBLFlBQUlELElBQUlFLE9BQUosQ0FBYVAsSUFBYixDQUFKLFNBQXdCO0FBQ3RCSSxlQUFLRSxJQUFMLEdBQVlGLEtBQUtFLElBQWpCLENBRHNCLENBQ0M7QUFDeEI7QUFDRjtBQUNGLEtBVEQ7QUFVRDtBQUNGOztBQUVEOzs7Ozs7OztBQVFlLFNBQVMvQix3QkFBVCxDQUFrQ2lDLFlBQWxDLEVBQWdEQyxZQUFoRCxFQUE4RDtBQUMzRSxNQUFJakMsR0FBSixFQUFTO0FBQ1AsUUFBSTtBQUNGRyxjQUFRLFFBQVIsRUFBa0IrQixTQUFsQixDQUE0QkMsR0FBNUIsR0FBa0M7QUFDaENDLGdCQUFTQyxFQUFELElBQVE5QixPQUFPQyxLQUFQLENBQWE4QixJQUFiLENBQWtCRCxFQUFsQjtBQURnQixPQUFsQzs7QUFJQWxDLGNBQVFvQyxJQUFSLENBQWFwQyxPQUFiLENBQXFCLHdCQUFyQjtBQUNELEtBTkQsQ0FNRSxPQUFPb0IsQ0FBUCxFQUFVO0FBQ1ZpQixjQUFRQyxLQUFSLENBQWUsZ0dBQStGbEIsRUFBRW1CLE9BQVEsRUFBeEg7QUFDRDtBQUNGOztBQUVELE1BQUlDLGVBQWVWLGVBQ2pCakIsT0FBT0MsSUFBUCxDQUFZZSxhQUFhWSxtQkFBekIsQ0FEaUIsR0FFakI1QixPQUFPQyxJQUFQLENBQVllLGFBQWFhLG1CQUF6QixDQUZGOztBQUlBRixlQUFhdEIsT0FBYixDQUFzQnlCLFFBQUQsSUFBYztBQUNqQyxRQUFJQyxNQUFNQyxvQkFBVUMsU0FBVixDQUFvQkgsUUFBcEIsQ0FBVjs7QUFFQTNDLFlBQVErQyxVQUFSLENBQW9CLElBQUdILEdBQUksRUFBM0IsSUFBZ0MsQ0FBQ0ksTUFBRCxFQUFTQyxRQUFULEtBQXNCO0FBQUEsa0NBQ3ZDcEIsYUFBYXFCLFdBQWIsQ0FBeUJELFFBQXpCLENBRHVDOztBQUFBLFVBQy9DRSxJQUQrQyx5QkFDL0NBLElBRCtDOzs7QUFHcEQsVUFBSUEsU0FBUyxJQUFiLEVBQW1CO0FBQ2pCZCxnQkFBUUMsS0FBUixDQUFlLDJCQUEwQlcsUUFBUyxpRkFBbEQ7QUFDRDs7QUFFREQsYUFBT0ksUUFBUCxDQUFnQkQsSUFBaEIsRUFBc0JGLFFBQXRCO0FBQ0QsS0FSRDtBQVNELEdBWkQ7QUFhRCIsImZpbGUiOiJyZXF1aXJlLWhvb2suanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWltZVR5cGVzIGZyb20gJ0BwYXVsY2JldHRzL21pbWUtdHlwZXMnO1xuXG5sZXQgSE1SID0gZmFsc2U7XG5sZXQgc3R5bGVzaGVldFJlbG9hZCA9IGZhbHNlO1xuXG5jb25zdCBkID0gcmVxdWlyZSgnZGVidWcnKSgnZWxlY3Ryb24tY29tcGlsZTpyZXF1aXJlLWhvb2snKTtcbmxldCBlbGVjdHJvbiA9IG51bGw7XG5cbmlmIChwcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgd2luZG93Ll9faG90ID0gW107XG4gIGVsZWN0cm9uID0gcmVxdWlyZSgnZWxlY3Ryb24nKTtcbiAgSE1SID0gZWxlY3Ryb24ucmVtb3RlLmdldEdsb2JhbCgnX19lbGVjdHJvbl9jb21waWxlX2htcl9lbmFibGVkX18nKTtcbiAgc3R5bGVzaGVldFJlbG9hZCA9IGVsZWN0cm9uLnJlbW90ZS5nZXRHbG9iYWwoJ19fZWxlY3Ryb25fY29tcGlsZV9zdHlsZXNoZWV0X3JlbG9hZF9lbmFibGVkX18nKTtcblxuICBpZiAoSE1SKSB7XG4gICAgZWxlY3Ryb24uaXBjUmVuZGVyZXIub24oJ19fZWxlY3Ryb24tY29tcGlsZV9fSE1SJywgKCkgPT4ge1xuICAgICAgZChcIkdvdCBITVIgc2lnbmFsIVwiKTtcblxuICAgICAgLy8gUmVzZXQgdGhlIG1vZHVsZSBjYWNoZVxuICAgICAgbGV0IGNhY2hlID0gcmVxdWlyZSgnbW9kdWxlJykuX2NhY2hlO1xuICAgICAgbGV0IHRvRWplY3QgPSBPYmplY3Qua2V5cyhjYWNoZSkuZmlsdGVyKHggPT4geCAmJiAheC5tYXRjaCgvW1xcXFxcXC9dKG5vZGVfbW9kdWxlc3wuKlxcLmFzYXIpW1xcXFxcXC9dL2kpKTtcbiAgICAgIHRvRWplY3QuZm9yRWFjaCh4ID0+IHtcbiAgICAgICAgZChgUmVtb3Zpbmcgbm9kZSBtb2R1bGUgZW50cnkgZm9yICR7eH1gKTtcbiAgICAgICAgZGVsZXRlIGNhY2hlW3hdO1xuICAgICAgfSk7XG5cbiAgICAgIHdpbmRvdy5fX2hvdC5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHN0eWxlc2hlZXRSZWxvYWQpIHtcbiAgICBlbGVjdHJvbi5pcGNSZW5kZXJlci5vbignX19lbGVjdHJvbi1jb21waWxlX19zdHlsZXNoZWV0X3JlbG9hZCcsIChlLCBwYXRoKSA9PiB7XG4gICAgICBsZXQgbGlua3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGluaycpO1xuXG4gICAgICBmb3IgKGxldCBsaW5rIG9mIGxpbmtzKSB7XG4gICAgICAgIGxldCB1cmkgPSBsaW5rLmhyZWZcbiAgICAgICAgaWYgKHVyaS5pbmNsdWRlcyhwYXRoKSkge1xuICAgICAgICAgIGxpbmsuaHJlZiA9IGxpbmsuaHJlZjsgLy8gdHJpZ2dlciBhIHJlbG9hZCBmb3IgdGhpcyBzdHlsZXNoZWV0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIHRoZSBub2RlLmpzIGhvb2sgdGhhdCBhbGxvd3MgdXMgdG8gaW50ZXJjZXB0IGZpbGVzIGxvYWRlZCBieVxuICogbm9kZS5qcyBhbmQgcmV3cml0ZSB0aGVtLiBUaGlzIG1ldGhvZCBhbG9uZyB3aXRoIHtAbGluayBpbml0aWFsaXplUHJvdG9jb2xIb29rfVxuICogYXJlIHRoZSB0b3AtbGV2ZWwgbWV0aG9kcyB0aGF0IGVsZWN0cm9uLWNvbXBpbGUgYWN0dWFsbHkgdXNlcyB0byBpbnRlcmNlcHRcbiAqIGNvZGUgdGhhdCBFbGVjdHJvbiBsb2Fkcy5cbiAqXG4gKiBAcGFyYW0gIHtDb21waWxlckhvc3R9IGNvbXBpbGVySG9zdCAgVGhlIGNvbXBpbGVyIGhvc3QgdG8gdXNlIGZvciBjb21waWxhdGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVnaXN0ZXJSZXF1aXJlRXh0ZW5zaW9uKGNvbXBpbGVySG9zdCwgaXNQcm9kdWN0aW9uKSB7XG4gIGlmIChITVIpIHtcbiAgICB0cnkge1xuICAgICAgcmVxdWlyZSgnbW9kdWxlJykucHJvdG90eXBlLmhvdCA9IHtcbiAgICAgICAgYWNjZXB0OiAoY2IpID0+IHdpbmRvdy5fX2hvdC5wdXNoKGNiKVxuICAgICAgfTtcblxuICAgICAgcmVxdWlyZS5tYWluLnJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXIvcGF0Y2gnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBDb3VsZG4ndCByZXF1aXJlIHJlYWN0LWhvdC1sb2FkZXIvcGF0Y2gsIHlvdSBuZWVkIHRvIGFkZCByZWFjdC1ob3QtbG9hZGVyQDMgYXMgYSBkZXBlbmRlbmN5ISAke2UubWVzc2FnZX1gKTtcbiAgICB9XG4gIH1cblxuICBsZXQgbWltZVR5cGVMaXN0ID0gaXNQcm9kdWN0aW9uID9cbiAgICBPYmplY3Qua2V5cyhjb21waWxlckhvc3QubWltZVR5cGVzVG9SZWdpc3RlcikgOlxuICAgIE9iamVjdC5rZXlzKGNvbXBpbGVySG9zdC5jb21waWxlcnNCeU1pbWVUeXBlKTtcblxuICBtaW1lVHlwZUxpc3QuZm9yRWFjaCgobWltZVR5cGUpID0+IHtcbiAgICBsZXQgZXh0ID0gbWltZVR5cGVzLmV4dGVuc2lvbihtaW1lVHlwZSk7XG5cbiAgICByZXF1aXJlLmV4dGVuc2lvbnNbYC4ke2V4dH1gXSA9IChtb2R1bGUsIGZpbGVuYW1lKSA9PiB7XG4gICAgICBsZXQge2NvZGV9ID0gY29tcGlsZXJIb3N0LmNvbXBpbGVTeW5jKGZpbGVuYW1lKTtcblxuICAgICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgbnVsbCBjb2RlIHJldHVybmVkIGZvciBcIiR7ZmlsZW5hbWV9XCIuICBQbGVhc2UgcmFpc2UgYW4gaXNzdWUgb24gJ2VsZWN0cm9uLWNvbXBpbGUnIHdpdGggdGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZS5gKTtcbiAgICAgIH1cblxuICAgICAgbW9kdWxlLl9jb21waWxlKGNvZGUsIGZpbGVuYW1lKTtcbiAgICB9O1xuICB9KTtcbn1cbiJdfQ==